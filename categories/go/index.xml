<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Gagandeep Singh</title>
    <link>https://pixxstudios.github.io/categories/go/</link>
    <description>Recent content in Go on Gagandeep Singh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://pixxstudios.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go - Arrays and Slices</title>
      <link>https://pixxstudios.github.io/posts/8.-go-slice-vs-array/</link>
      <pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/8.-go-slice-vs-array/</guid>
      <description>Arrays ðŸ”—Like any other programming language, arrays in Go are used to group elements of same type and has a fixed length together. Whenever an array is declared or initialized the type of array has to be defined. Type of elements and the length are both used to defined the type of the array. For example, the array below can store string values and it&amp;rsquo;s length is 4, so its type is [4]string.</description>
    </item>
    
    <item>
      <title>Structs in Go</title>
      <link>https://pixxstudios.github.io/posts/14.-structs-in-go/</link>
      <pubDate>Fri, 25 Feb 2022 00:18:57 +1100</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/14.-structs-in-go/</guid>
      <description>Struct in Go allows to create custom data types. In the example below User is a struct type, it&amp;rsquo;s defined using the type keyword followed by the struct name and then struct. Struct can have once or more fields in it and fields are defined using name and type.
For example:
package main import &amp;#34;fmt&amp;#34; func main() { type User struct { firstname, lastname string age int } u1 := User{ firstname: &amp;#34;Gagandeep&amp;#34;, lastname: &amp;#34;Singh&amp;#34;, age: 32} fmt.</description>
    </item>
    
  </channel>
</rss>
