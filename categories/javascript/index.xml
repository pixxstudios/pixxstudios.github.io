<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Gagandeep Singh</title>
    <link>https://pixxstudios.github.io/categories/javascript/</link>
    <description>Recent content in javascript on Gagandeep Singh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Feb 2022 00:18:57 +1100</lastBuildDate><atom:link href="https://pixxstudios.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create a globally executable javascript file</title>
      <link>https://pixxstudios.github.io/posts/13.-create-executable-javascript-file/</link>
      <pubDate>Mon, 21 Feb 2022 00:18:57 +1100</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/13.-create-executable-javascript-file/</guid>
      <description>We will understand and see how to create an executable javascript file using a global command.
Lets say for example you want to create a clone of &amp;lsquo;ls&amp;rsquo; or &amp;lsquo;cmd&amp;rsquo; command which shows the content of the current folder or from the path provided. To acheive that we need to have a global command.
To acheive this we need to do couple of things and need to have 2 files (index.</description>
    </item>
    
    <item>
      <title>Using pre-commit hook in package.json</title>
      <link>https://pixxstudios.github.io/posts/7.-use-pre-commit-hook/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/7.-use-pre-commit-hook/</guid>
      <description>One of the traits of someone who follows or moving towards a good coding practice environment is making sure that you are not pushing the code which may have linting issues and/or failing unit tests.
Adding a pre-commit hook forces to check the lint and run unit tests (or any other script) to be sure that everything is good before committing changes.
npm i --save-dev pre-commit Next step is to update the package.</description>
    </item>
    
    <item>
      <title>undefined and null in Javascript</title>
      <link>https://pixxstudios.github.io/posts/6.-undefined-null-javascript/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/6.-undefined-null-javascript/</guid>
      <description>undefined In Javascript undefined (a primitive type in Javascript) gets assigned to a variable that we declare but don&amp;rsquo;t assign a value to. It&amp;rsquo;s Javascript&amp;rsquo;s way of telling that the value of this variable is not defined.
Even a function in Javascript which does not return anything, will return undefined by default.
So, to avoid any error we should never assign undefined to a variable manually.
typeof undefined outputs: undefined  null Unlike undefined, null (another primitive type in Javascript) is used when we want to manually or intentionally set the value of a variable to be empty.</description>
    </item>
    
    <item>
      <title>Using useState hook with the previous state</title>
      <link>https://pixxstudios.github.io/posts/4.-use-state-with-previous-state/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/4.-use-state-with-previous-state/</guid>
      <description>Let&amp;rsquo;s take a very basic use case of the useState() hook; updating the count variable on each click.
The code look perfectly fine and will work as expected in almost every time.
BUT the issue with this code is that setCount() doesn&amp;rsquo;t guarantee that the previous count that it&amp;rsquo;s going to use to either increment and decrement to get the next state will be the latest one.
To make sure that we always use the latest previous state for calculating the new state, we need to pass a callback function in the setCount rather than directly doing computation inside it.</description>
    </item>
    
    <item>
      <title>Browser storage (overview)</title>
      <link>https://pixxstudios.github.io/posts/3.-browser-storage/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/3.-browser-storage/</guid>
      <description> Storing data on the machine of the user Data is available to the user on that particular machine and hence cannot be shared with anyone else Example: Storing data such as items in my shopping cart or recently viewed products Different types of browser storage options available are:  Local storage / Session storage Cookies IndexedDB     Local Storage /Session Storage  key-value pairs to store data data can read/write from/to local or session storage only via javascript or user better for storing simple values and not for storing complex values   Cookies  simple key-value pairs with some configuration options can be cleared by using javascript or by the user data in the cookies is send to the server (they are attached to the headers of the http request) not good for complex data   IndexedDB  client side database can be used with a query language good for storing complex data on client side can be cleared by user or javascript  </description>
    </item>
    
    <item>
      <title>ES7 features you should be using</title>
      <link>https://pixxstudios.github.io/posts/2.-es7-features/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/2.-es7-features/</guid>
      <description>Array includes() method The old way to check if some value is present inside an array was to use Array&amp;rsquo;s indexOf() method. IndexOf() returned -1 if element is not found or else the position of element if it&amp;rsquo;s present in the array.
Exponential operator Similar to Math.pow(), the exponential operator ** was introduced in ES2016. It returns the first argument raised to the power of second argument.</description>
    </item>
    
  </channel>
</rss>
