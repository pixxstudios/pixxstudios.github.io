<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typescript on Gagandeep Singh</title>
    <link>https://pixxstudios.github.io/categories/typescript/</link>
    <description>Recent content in typescript on Gagandeep Singh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://pixxstudios.github.io/categories/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Typescript - Types vs Interface</title>
      <link>https://pixxstudios.github.io/posts/21.types-vs-interface/</link>
      <pubDate>Sat, 19 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/21.types-vs-interface/</guid>
      <description>Types ðŸ”—A type helps in defining the shape or structure of the javascript value. A type can consist of a single property or method or can have combination of multiple properties and methods.
For example, the type of variables below can be inferred by typescript by checking the values assigned to them.
let id = 123; //number let name = &amp;#34;Gagandeep Singh&amp;#34;; //string let skills = [&amp;#34;typescript&amp;#34;, &amp;#34;react&amp;#34;]; // string[] But in case of an object or complex data structure it&amp;rsquo;s good to define a type beforehand.</description>
    </item>
    
    <item>
      <title>Typescript - Union vs Intersection types</title>
      <link>https://pixxstudios.github.io/posts/20.union-vs-intersection-types/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/20.union-vs-intersection-types/</guid>
      <description>Union Types ðŸ”—Multiple types can be defined on a value by using the | symbol. When a value is expected to have one of many known types, then using union type is the most suitable option (rather than any or unknown).
type value = number | boolean; Here value can be either number or boolean.
We can also combine custom type using the union operator.
interface house { hasDoor: boolean; address: string; } interface building { hasLift: boolean; address: string; } type houseOrBuilding = house | building const hb: houseOrBuilding In above case hb can only access members that are common to all types in the union.</description>
    </item>
    
    <item>
      <title>Generics in Typescript</title>
      <link>https://pixxstudios.github.io/posts/12.-generics-typescript/</link>
      <pubDate>Thu, 14 Oct 2021 00:18:57 +1100</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/12.-generics-typescript/</guid>
      <description>Tuples is a type that exists in Typescript which is similar to Array type but has fixed length and defined what kind of element (either same or different types) will be there at a certain position.
// Array example const a: number[] = [1, 2, 3]; // Tuple example const t: [string, number, boolean] = [&amp;#34;2&amp;#34;, 1, true]; Since Tuples are just arrays, so it will allow to push a new element only of type either string or number as defined in the tupleType below.</description>
    </item>
    
    <item>
      <title>Tuples in Typescript</title>
      <link>https://pixxstudios.github.io/posts/11.-tuples-typescript/</link>
      <pubDate>Wed, 13 Oct 2021 00:18:57 +1100</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/11.-tuples-typescript/</guid>
      <description>Tuples is a type that exists in Typescript which is similar to Array type but has fixed length and defined what kind of element (either same or different types) will be there at a certain position.
// Array example const a: number[] = [1, 2, 3]; // Tuple example const t: [string, number, boolean] = [&amp;#34;2&amp;#34;, 1, true]; Since Tuples are just arrays, so it will allow to push a new element only of type either string or number as defined in the TupleType below.</description>
    </item>
    
  </channel>
</rss>
