<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Gagandeep Singh</title>
    <link>https://pixxstudios.github.io/posts/</link>
    <description>Recent content in Posts on Gagandeep Singh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://pixxstudios.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Typescript - Types vs Interface</title>
      <link>https://pixxstudios.github.io/posts/21.types-vs-interface/</link>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/21.types-vs-interface/</guid>
      <description>Types A type helps in defining the shape or structure of the javascript value. A type can consist of a single property or method or can have combination of multiple properties and methods.
For example, the type of variables below can be inferred by typescript by checking the values assigned to them.
let id = 123; //number let name = &amp;#34;Gagandeep Singh&amp;#34;; //string let skills = [&amp;#34;typescript&amp;#34;, &amp;#34;react&amp;#34;]; // string[] But in case of an object or complex data structure it&amp;rsquo;s good to define a type beforehand.</description>
    </item>
    
    <item>
      <title>Typescript - Union vs Intersection types</title>
      <link>https://pixxstudios.github.io/posts/20.union-vs-intersection-types/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/20.union-vs-intersection-types/</guid>
      <description>Union Types Multiple types can be defined on a value by using the | symbol. When a value is expected to have one of many known types, then using union type is the most suitable option (rather than any or unknown).
type value = number | boolean; Here value can be either number or boolean.
We can also combine custom type using the union operator.
interface house { hasDoor: boolean; address: string; } interface building { hasLift: boolean; address: string; } type houseOrBuilding = house | building const hb: houseOrBuilding In above case hb can only access members that are common to all types in the union.</description>
    </item>
    
    <item>
      <title>Feature flagging in webpack</title>
      <link>https://pixxstudios.github.io/posts/19.webapck-feature-flagging/</link>
      <pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/19.webapck-feature-flagging/</guid>
      <description>Agile methodologies allows for smaller release to production fairly quickly. This could result in more feature branches/pull requests being created to enable/disable some feature specially when something needs to be tested on production. Other main advantage to use feature flag is that we don&amp;rsquo;t need to wait for a feature to be completed before it could be deployed to production. The feature flag for that particular feature could be switched off and once the whole feature is completed, tested and deployed to production, the feature flag can again be turned on.</description>
    </item>
    
    <item>
      <title>Various loops available in javascript</title>
      <link>https://pixxstudios.github.io/posts/18.-various-loops-in-javascript/</link>
      <pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/18.-various-loops-in-javascript/</guid>
      <description>This post will focus on the various loops available in the javascript and when to use them.
 for - Probably the most commonly used loop in any programming language. The for loop runs until a specific condition is true. As seen below, it has 3 parts:  i) initialization (i=0)
ii) condition (i&amp;lt;5)
iii) increment/decrement (i++/i--)
for (let i = 0; i &amp;lt; 5; i++) { console.log(i); } for (let i = 5; i &amp;gt;= 0; i--) { console.</description>
    </item>
    
    <item>
      <title>useCallback vs useMemo</title>
      <link>https://pixxstudios.github.io/posts/17.-use-callback-vs-use-memo/</link>
      <pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/17.-use-callback-vs-use-memo/</guid>
      <description>useCallback and useMemo are two of the multiple hooks released with React V16. Hooks are javascript functions which help in isolating some functionality from the functional component (hooks cannot be used inside class based components).
 useCallback - As per the official documents, useCallback &amp;ldquo;Returns a memoized callback&amp;rdquo;. Here memoized means maintaining or saving a version of the function in the memory for the given array of one or more dependencies.</description>
    </item>
    
    <item>
      <title>Different console methods in Javascript</title>
      <link>https://pixxstudios.github.io/posts/16.-console-methods/</link>
      <pubDate>Sun, 26 Jun 2022 00:18:57 +1100</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/16.-console-methods/</guid>
      <description>There are few console methods available in Javascript, console.log being the most common one. Each of these variations of console methods could and should be used depending on type of data to output.
 console.log() - As mentioned earlier console.log() is the most common console method and can be used to output any kind of data.  console.log(); const message = &amp;#34;Hello world&amp;#34;; const num1 = 10; const num2 = 20; console.</description>
    </item>
    
    <item>
      <title>Structs in Go</title>
      <link>https://pixxstudios.github.io/posts/14.-structs-in-go/</link>
      <pubDate>Fri, 25 Feb 2022 00:18:57 +1100</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/14.-structs-in-go/</guid>
      <description>Struct in Go allows to create custom data types. In the example below User is a struct type, it&amp;rsquo;s defined using the type keyword followed by the struct name and then struct. Struct can have once or more fields in it and fields are defined using name and type.
For example:
package main import &amp;#34;fmt&amp;#34; func main() { type User struct { firstname, lastname string age int } u1 := User{ firstname: &amp;#34;Gagandeep&amp;#34;, lastname: &amp;#34;Singh&amp;#34;, age: 32} fmt.</description>
    </item>
    
    <item>
      <title>Create a globally executable javascript file</title>
      <link>https://pixxstudios.github.io/posts/13.-create-executable-javascript-file/</link>
      <pubDate>Mon, 21 Feb 2022 00:18:57 +1100</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/13.-create-executable-javascript-file/</guid>
      <description>We will understand and see how to create an executable javascript file using a global command.
Lets say for example you want to create a clone of &amp;lsquo;ls&amp;rsquo; or &amp;lsquo;cmd&amp;rsquo; command which shows the content of the current folder or from the path provided. To acheive that we need to have a global command.
To acheive this we need to do couple of things and need to have 2 files (index.</description>
    </item>
    
    <item>
      <title>Generics in Typescript</title>
      <link>https://pixxstudios.github.io/posts/12.-generics-typescript/</link>
      <pubDate>Thu, 14 Oct 2021 00:18:57 +1100</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/12.-generics-typescript/</guid>
      <description>Tuples is a type that exists in Typescript which is similar to Array type but has fixed length and defined what kind of element (either same or different types) will be there at a certain position.
// Array example const a: number[] = [1, 2, 3]; // Tuple example const t: [string, number, boolean] = [&amp;#34;2&amp;#34;, 1, true]; Since Tuples are just arrays, so it will allow to push a new element only of type either string or number as defined in the tupleType below.</description>
    </item>
    
    <item>
      <title>Tuples in Typescript</title>
      <link>https://pixxstudios.github.io/posts/11.-tuples-typescript/</link>
      <pubDate>Wed, 13 Oct 2021 00:18:57 +1100</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/11.-tuples-typescript/</guid>
      <description>Tuples is a type that exists in Typescript which is similar to Array type but has fixed length and defined what kind of element (either same or different types) will be there at a certain position.
// Array example const a: number[] = [1, 2, 3]; // Tuple example const t: [string, number, boolean] = [&amp;#34;2&amp;#34;, 1, true]; Since Tuples are just arrays, so it will allow to push a new element only of type either string or number as defined in the TupleType below.</description>
    </item>
    
    <item>
      <title>Using pre-commit hook in package.json</title>
      <link>https://pixxstudios.github.io/posts/7.-use-pre-commit-hook/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/7.-use-pre-commit-hook/</guid>
      <description>One of the traits of someone who follows or moving towards a good coding practice environment is making sure that you are not pushing the code which may have linting issues and/or failing unit tests.
Adding a pre-commit hook forces to check the lint and run unit tests (or any other script) to be sure that everything is good before committing changes.
npm i --save-dev pre-commit Next step is to update the package.</description>
    </item>
    
    <item>
      <title>undefined and null in Javascript</title>
      <link>https://pixxstudios.github.io/posts/6.-undefined-null-javascript/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/6.-undefined-null-javascript/</guid>
      <description>undefined In Javascript undefined (a primitive type in Javascript) gets assigned to a variable that we declare but don&amp;rsquo;t assign a value to. It&amp;rsquo;s Javascript&amp;rsquo;s way of telling that the value of this variable is not defined.
Even a function in Javascript which does not return anything, will return undefined by default.
So, to avoid any error we should never assign undefined to a variable manually.
typeof undefined; outputs: undefined;  null Unlike undefined, null (another primitive type in Javascript) is used when we want to manually or intentionally set the value of a variable to be empty.</description>
    </item>
    
    <item>
      <title>Docker - useful commands</title>
      <link>https://pixxstudios.github.io/posts/5.-docker-commands/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/5.-docker-commands/</guid>
      <description>To run a container using an image docker run &amp;lt;image name&amp;gt; example: docker run hello-world
 Override the default command for a container docker run &amp;lt;image name&amp;gt; command example: docker run busybox ls
 Show running containers docker ps docker ps --all This will list all the containers that were ever created on your machine.
 Restart stopped containers docker start &amp;lt;container id&amp;gt; example:
run docker ps &amp;ndash;all to get the list of containers</description>
    </item>
    
    <item>
      <title>Using useState hook with the previous state</title>
      <link>https://pixxstudios.github.io/posts/4.-use-state-with-previous-state/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/4.-use-state-with-previous-state/</guid>
      <description>Let&amp;rsquo;s take a very basic use case of the useState() hook; updating the count variable on each click.
The code look perfectly fine and will work as expected in almost every time.
BUT the issue with this code is that setCount() doesn&amp;rsquo;t guarantee that the previous count that it&amp;rsquo;s going to use to either increment and decrement to get the next state will be the latest one.
To make sure that we always use the latest previous state for calculating the new state, we need to pass a callback function in the setCount rather than directly doing computation inside it.</description>
    </item>
    
    <item>
      <title>Browser storage (overview)</title>
      <link>https://pixxstudios.github.io/posts/3.-browser-storage/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/3.-browser-storage/</guid>
      <description> Storing data on the machine of the user Data is available to the user on that particular machine and hence cannot be shared with anyone else Example: Storing data such as items in my shopping cart or recently viewed products Different types of browser storage options available are:  Local storage / Session storage Cookies IndexedDB     Local Storage /Session Storage  key-value pairs to store data data can read/write from/to local or session storage only via javascript or user better for storing simple values and not for storing complex values   Cookies  simple key-value pairs with some configuration options can be cleared by using javascript or by the user data in the cookies is send to the server (they are attached to the headers of the http request) not good for complex data   IndexedDB  client side database can be used with a query language good for storing complex data on client side can be cleared by user or javascript  </description>
    </item>
    
    <item>
      <title>ES7 features you should be using</title>
      <link>https://pixxstudios.github.io/posts/2.-es7-features/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/2.-es7-features/</guid>
      <description>Array includes() method The old way to check if some value is present inside an array was to use Array&amp;rsquo;s indexOf() method. IndexOf() returned -1 if element is not found or else the position of element if it&amp;rsquo;s present in the array.
Exponential operator Similar to Math.pow(), the exponential operator ** was introduced in ES2016. It returns the first argument raised to the power of second argument.</description>
    </item>
    
    <item>
      <title>Container vs Presentational Components in ReactJS</title>
      <link>https://pixxstudios.github.io/posts/1.-container-vs-presentational-compoenents/</link>
      <pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/1.-container-vs-presentational-compoenents/</guid>
      <description>Presentational/Functional/Stateless Components Functional components in ReactJS is a simpler way of creating components. Some of the key features of functional components are:
 It is best suitable for components which only consists of a render method They are also called stateless components since they don&amp;rsquo;t have an internal state and just make use of props to display the data It is not a class which extends React.Component It is just a function which accepts props and returns the rendered component You can define propTypes and defaultProps on the function  let helloComponent = (props) =&amp;gt; { return( {props.</description>
    </item>
    
  </channel>
</rss>
