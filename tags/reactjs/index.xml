<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reactjs on Gagandeep Singh</title>
    <link>https://pixxstudios.github.io/tags/reactjs/</link>
    <description>Recent content in reactjs on Gagandeep Singh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://pixxstudios.github.io/tags/reactjs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>useCallback vs useMemo</title>
      <link>https://pixxstudios.github.io/posts/17.-use-callback-vs-use-memo/</link>
      <pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/17.-use-callback-vs-use-memo/</guid>
      <description>useCallback and useMemo are two of the multiple hooks released with React V16. Hooks are javascript functions which help in isolating some functionality from the functional component (hooks cannot be used inside class based components).
 useCallback - As per the official documents, useCallback &amp;ldquo;Returns a memoized callback&amp;rdquo;. Here memoized means maintaining or saving a version of the function in the memory for the given array of one or more dependencies.</description>
    </item>
    
    <item>
      <title>Using useState hook with the previous state</title>
      <link>https://pixxstudios.github.io/posts/4.-use-state-with-previous-state/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pixxstudios.github.io/posts/4.-use-state-with-previous-state/</guid>
      <description>Let&amp;rsquo;s take a very basic use case of the useState() hook; updating the count variable on each click.
The code look perfectly fine and will work as expected in almost every time.
BUT the issue with this code is that setCount() doesn&amp;rsquo;t guarantee that the previous count that it&amp;rsquo;s going to use to either increment and decrement to get the next state will be the latest one.
To make sure that we always use the latest previous state for calculating the new state, we need to pass a callback function in the setCount rather than directly doing computation inside it.</description>
    </item>
    
  </channel>
</rss>
