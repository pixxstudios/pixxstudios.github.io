[{"content":"One of the traits of someone who follows or moving towards a good coding practice environment is making sure that you are not pushing the code which may have linting issues and/or failing unit tests.\nAdding a pre-commit hook forces to check the lint and run unit tests (or any other script) to be sure that everything is good before committing changes.\nnpm i --save-dev pre-commit Next step is to update the package.json file to included pre-commit hook.\n\u0026#34;pre-commit\u0026#34;: \\[ \u0026#34;test\u0026#34;, \u0026#34;lint\u0026#34; \\] Now whenever you try to commit any changes, the \u0026ldquo;test\u0026rdquo; script will run first and then the \u0026ldquo;lint\u0026rdquo; script. It will show an error in case unit tests are not passing or there is a linting issue.\nSkip running the pre-commit add --no-verify to the git command ","permalink":"https://pixxstudios.github.io/posts/use-pre-commit-hook/","summary":"One of the traits of someone who follows or moving towards a good coding practice environment is making sure that you are not pushing the code which may have linting issues and/or failing unit tests.\nAdding a pre-commit hook forces to check the lint and run unit tests (or any other script) to be sure that everything is good before committing changes.\nnpm i --save-dev pre-commit Next step is to update the package.","title":"Using pre-commit hook in package.json"},{"content":"undefined In Javascript undefined (a primitive type in Javascript) gets assigned to a variable that we declare but don\u0026rsquo;t assign a value to. It\u0026rsquo;s Javascript\u0026rsquo;s way of telling that the value of this variable is not defined.\nEven a function in Javascript which does not return anything, will return undefined by default.\nSo, to avoid any error we should never assign undefined to a variable manually.\ntypeof undefined outputs: undefined  null Unlike undefined, null (another primitive type in Javascript) is used when we want to manually or intentionally set the value of a variable to be empty.\nWhen comparing null with undefined remember to use === instead of ==, reason being\nnull == undefined returns true as it doesn\u0026#39;t check for the type and performs type-conversion null === undefined return false typeof null is object and not null (more details here)\n","permalink":"https://pixxstudios.github.io/posts/undefined-null-javascript/","summary":"undefined In Javascript undefined (a primitive type in Javascript) gets assigned to a variable that we declare but don\u0026rsquo;t assign a value to. It\u0026rsquo;s Javascript\u0026rsquo;s way of telling that the value of this variable is not defined.\nEven a function in Javascript which does not return anything, will return undefined by default.\nSo, to avoid any error we should never assign undefined to a variable manually.\ntypeof undefined outputs: undefined  null Unlike undefined, null (another primitive type in Javascript) is used when we want to manually or intentionally set the value of a variable to be empty.","title":"undefined and null in Javascript"},{"content":"To run a container using an image docker run \u0026lt;image name\u0026gt; example: docker run hello-world\n Override the default command for a container docker run \u0026lt;image name\u0026gt; command example: docker run busybox ls\n Show running containers docker ps docker ps --all This will list all the containers that were ever created on your machine.\n Restart stopped containers docker start \u0026lt;container id\u0026gt; example:\nrun docker ps \u0026ndash;all to get the list of containers\ncopy the container id of the stopped container (It will have a status as exited) that you want to restart.\nIt will start the container and use the optional -a flag to log the default output of that container (In the above case it\u0026rsquo;s ping pixxstudios.com)\n Remove stopped containers docker system prune  Get logs from a container docker logs \u0026lt;container id\u0026gt;  Stopping a container docker stop \u0026lt;container id\u0026gt; Give container 10 seconds to wrap up whatever its doing and then stop the container.\ndocker kill \u0026lt;container id\u0026gt; Just stop whatever process is running in the container immediately and then stop the container itself.\n","permalink":"https://pixxstudios.github.io/posts/docker-commands/","summary":"To run a container using an image docker run \u0026lt;image name\u0026gt; example: docker run hello-world\n Override the default command for a container docker run \u0026lt;image name\u0026gt; command example: docker run busybox ls\n Show running containers docker ps docker ps --all This will list all the containers that were ever created on your machine.\n Restart stopped containers docker start \u0026lt;container id\u0026gt; example:\nrun docker ps \u0026ndash;all to get the list of containers","title":"Docker - useful commands"},{"content":"Let\u0026rsquo;s take a very basic use case of the useState() hook; updating the count variable on each click.\nThe code look perfectly fine and will work as expected in almost every time.\nBUT the issue with this code is that setCount() doesn\u0026rsquo;t guarantee that the previous count that it\u0026rsquo;s going to use to either increment and decrement to get the next state will be the latest one.\nTo make sure that we always use the latest previous state for calculating the new state, we need to pass a callback function in the setCount rather than directly doing computation inside it.\nThis way we can guarantee that we are always using the latest state value before using it.\n","permalink":"https://pixxstudios.github.io/posts/use-state-with-previous-state/","summary":"Let\u0026rsquo;s take a very basic use case of the useState() hook; updating the count variable on each click.\nThe code look perfectly fine and will work as expected in almost every time.\nBUT the issue with this code is that setCount() doesn\u0026rsquo;t guarantee that the previous count that it\u0026rsquo;s going to use to either increment and decrement to get the next state will be the latest one.\nTo make sure that we always use the latest previous state for calculating the new state, we need to pass a callback function in the setCount rather than directly doing computation inside it.","title":"Using useState hook with the previous state"},{"content":" Storing data on the machine of the user Data is available to the user on that particular machine and hence cannot be shared with anyone else Example: Storing data such as items in my shopping cart or recently viewed products Different types of browser storage options available are:  Local storage / Session storage Cookies IndexedDB     Local Storage /Session Storage  key-value pairs to store data data can read/write from/to local or session storage only via javascript or user better for storing simple values and not for storing complex values   Cookies  simple key-value pairs with some configuration options can be cleared by using javascript or by the user data in the cookies is send to the server (they are attached to the headers of the http request) not good for complex data   IndexedDB  client side database can be used with a query language good for storing complex data on client side can be cleared by user or javascript  ","permalink":"https://pixxstudios.github.io/posts/browser-storage/","summary":" Storing data on the machine of the user Data is available to the user on that particular machine and hence cannot be shared with anyone else Example: Storing data such as items in my shopping cart or recently viewed products Different types of browser storage options available are:  Local storage / Session storage Cookies IndexedDB     Local Storage /Session Storage  key-value pairs to store data data can read/write from/to local or session storage only via javascript or user better for storing simple values and not for storing complex values   Cookies  simple key-value pairs with some configuration options can be cleared by using javascript or by the user data in the cookies is send to the server (they are attached to the headers of the http request) not good for complex data   IndexedDB  client side database can be used with a query language good for storing complex data on client side can be cleared by user or javascript  ","title":"Browser storage (overview)"},{"content":"Array includes() method The old way to check if some value is present inside an array was to use Array\u0026rsquo;s indexOf() method. IndexOf() returned -1 if element is not found or else the position of element if it\u0026rsquo;s present in the array.\nExponential operator Similar to Math.pow(), the exponential operator ** was introduced in ES2016. It returns the first argument raised to the power of second argument.\n","permalink":"https://pixxstudios.github.io/posts/es7-features/","summary":"Array includes() method The old way to check if some value is present inside an array was to use Array\u0026rsquo;s indexOf() method. IndexOf() returned -1 if element is not found or else the position of element if it\u0026rsquo;s present in the array.\nExponential operator Similar to Math.pow(), the exponential operator ** was introduced in ES2016. It returns the first argument raised to the power of second argument.","title":"ES7 features you should be using."},{"content":"Presentational/Functional/Stateless Components Functional components in ReactJS is a simpler way of creating components. Some of the key features of functional components are:\n It is best suitable for components which only consists of a render method They are also called stateless components since they don\u0026rsquo;t have an internal state and just make use of props to display the data It is not a class which extends React.Component It is just a function which accepts props and returns the rendered component You can define propTypes and defaultProps on the function  let helloComponent = (props) =\u0026gt; { return( {props.name} )} helloComponent.propTypes = { name : React.PropTypes.string.isRequired } helloComponent.defaultProps = { name : \u0026#39;Gagandeep\u0026#39; }` Container Components Container components on the other hand are more concerned about how things work rather than how things look. Main features of a container components are:\n Suitable when components need to have their own state It can have all the lifecycle methods of a React component Communicate to Flux/Redux via actions and receive data from them, which is passed to other presentational or container components Contains presentational and container components within itself  class helloComponent extends React.Component{ render(){ return( {this.props.name} ) } } helloComponent.propTypes = { name : React.PropTypes.string.isRequired } helloComponent.defaultProps = { name : \u0026#39;Gagandeep\u0026#39; } ","permalink":"https://pixxstudios.github.io/posts/container-vs-presentational-compoenents/","summary":"Presentational/Functional/Stateless Components Functional components in ReactJS is a simpler way of creating components. Some of the key features of functional components are:\n It is best suitable for components which only consists of a render method They are also called stateless components since they don\u0026rsquo;t have an internal state and just make use of props to display the data It is not a class which extends React.Component It is just a function which accepts props and returns the rendered component You can define propTypes and defaultProps on the function  let helloComponent = (props) =\u0026gt; { return( {props.","title":"Container vs Presentational Components in ReactJS"},{"content":"","permalink":"https://pixxstudios.github.io/about/","summary":"","title":"About"},{"content":"","permalink":"https://pixxstudios.github.io/contact/","summary":"","title":"Contact"},{"content":"","permalink":"https://pixxstudios.github.io/work/","summary":"","title":"My Work"}]